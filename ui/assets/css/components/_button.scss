// Button component variables
$button-link-generate-scheme: true;
$button-subnav-box-shadow: 0 0 8px rgba(0,0,0,0.15);
$button-subnav-transition-duration: 200ms;
$button-subnav-transition: $button-subnav-transition-duration ease;
$button-subnav-z-index: 999;
$button-transition: 200ms ease;

/* Button component prototype */
a.button, button.button {
	align-items: center;
	background-color: darken($border-bg-color, 5);
	border-radius: $border-radius;
	color: $fg-color !important;
	display: inline-flex;
	font-size: $normal-font-size;
	font-weight: $bold-font-weight;
	height: $element-height;
	justify-content: center;
	padding: 0 0.8em;
	text-decoration: none;
	transition: background-color $button-transition, opacity $button-transition;
	-moz-user-select: none;
	-ms-user-select: none;
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	user-select: none;
	white-space: nowrap;

	body.no-touch &:hover, &:active {
		background-color: darken($border-bg-color, 10);
	}

	&.keyboard-focus:focus {
		box-shadow: inset 0 0 0 3px $focus-color;
		outline: 0;
	}

	&.button--fit {
		width: 100%;
	}
}

button.button {
	-moz-appearance: none;
	-webkit-appearance: none;
	border: none;
	cursor: pointer;

	&[type="submit"]:disabled, &[type="button"]:disabled {
		opacity: 0.5;
		pointer-events: none;
	}
}

/* Button component extensions */
a.button, button.button {
}

/* Button group component prototype */
ul.button-group-list {

	> li {
		padding-right: 2px;

		.button {
			border-radius: 0;
			position: relative;
			width: 100%;
		}

		&:first-child .button {
			border-radius: $border-radius 0 0 $border-radius;
		}

		&:last-child {
			padding-right: 0;

			.button {
				border-radius: 0 $border-radius $border-radius 0;
			}
		}

		&:only-child .button {
			border-radius: $border-radius;
		}
	}
}

/* Button group component extensions */
ul.button-group-list {
}

/* Button subnav component prototype */
div.button-subnav {
	position: relative;

	> ul {
		background-color: $bg-color;
		border-radius: $border-radius;
		border: 1px solid $border-color;
		box-shadow: $button-subnav-box-shadow;
		left: 0;
		list-style: none;
		margin: 0;
		max-height: 0;
		opacity: 0;
		padding-left: 0;
		position: absolute;
		top: 100%;
		transform: translate3d(0, 1rem, 0);
		transition: visibility $button-subnav-transition, transform $button-subnav-transition, opacity $button-subnav-transition, max-height $button-subnav-transition $button-subnav-transition-duration;
		visibility: hidden;
		z-index: $button-subnav-z-index;

		> li {
			padding: 0 ($box-padding * 0.5);

			> a {
				color: inherit;
				display: block;
				font-size: $subnav-font-size;
				padding: ($box-padding * 0.5);
				text-decoration: none;
				white-space: nowrap;

				body.no-touch &:hover {
					color: $link-color;
				}
			}

			&:first-child {
				padding-top: ($box-padding * 0.5);
			}

			&:last-child {
				padding-bottom: ($box-padding * 0.5);
			}
		}

		&:before, &:after {
			border: $box-arrow solid transparent;
			content: '';
			display: inline-block;
			left: calc(#{$box-padding} - #{$box-arrow});
			position: absolute;
		}

		&:before {
			border-bottom-color: $border-color;
			top: ($box-arrow * -2);
		}

		&:after {
			border-bottom-color: $bg-color;
			top: (($box-arrow * -2) + 1);
		}

		&.is-opened {
			opacity: 1;
			transform: translate3d(0, 0, 0);
			transition: visibility $button-subnav-transition, transform $button-subnav-transition, opacity $button-subnav-transition;
			visibility: visible;
		}
	}
}

/* Button subnav component extensions */
div.button-subnav {
}

/* Button link component prototype */
button.button-link {
	background-color: transparent;
	border: none;
	color: inherit;
	cursor: pointer;
	display: inline-block;
	padding: 0;
	text-align: left;

	body.no-touch &:hover {
		color: $link-color;
	}

	&:disabled {
		color: mix($fg-color, $bg-color, 50%);
		cursor: not-allowed;

		body.no-touch &:hover {
			color: mix($fg-color, $bg-color, 50%);
		}
	}
}

/* Button link component extensions */
button.button-link {
}

/* Button link component scheme modifications */
@each $scheme in map-keys($schemes) {
	@if (map-val($schemes, $scheme, generate-scheme) and $button-link-generate-scheme) {
		.scheme--#{$scheme} {

			button.button-link {

				body.no-touch &:hover {
					color: map-val($schemes, $scheme, link-color);
				}

				&:disabled {
					color: mix(map-val($schemes, $scheme, fg-color), map-val($schemes, $scheme, bg-color), 50%);

					body.no-touch &:hover {
						color: mix(map-val($schemes, $scheme, fg-color), map-val($schemes, $scheme, bg-color), 50%);
					}
				}
			}
		}
	}
}
